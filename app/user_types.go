// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "Task": Application User Types
//
// Command:
// $ goagen
// --design=github.com/BcRikko/learning-goa/design
// --out=$(GOPATH)/src/github.com/BcRikko/learning-goa
// --version=v1.3.0

package app

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// taskPayload user type.
type taskPayload struct {
	// タスクの完了状態
	Done *bool `form:"done,omitempty" json:"done,omitempty" xml:"done,omitempty"`
	// タスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// Finalize sets the default values for taskPayload type instance.
func (ut *taskPayload) Finalize() {
	var defaultDone = false
	if ut.Done == nil {
		ut.Done = &defaultDone
	}
}

// Validate validates the taskPayload type instance.
func (ut *taskPayload) Validate() (err error) {
	if ut.Title == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "title"))
	}
	if ut.Title != nil {
		if utf8.RuneCountInString(*ut.Title) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.title`, *ut.Title, utf8.RuneCountInString(*ut.Title), 2, true))
		}
	}
	if ut.Title != nil {
		if utf8.RuneCountInString(*ut.Title) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.title`, *ut.Title, utf8.RuneCountInString(*ut.Title), 128, false))
		}
	}
	return
}

// Publicize creates TaskPayload from taskPayload
func (ut *taskPayload) Publicize() *TaskPayload {
	var pub TaskPayload
	if ut.Done != nil {
		pub.Done = *ut.Done
	}
	if ut.Title != nil {
		pub.Title = *ut.Title
	}
	return &pub
}

// TaskPayload user type.
type TaskPayload struct {
	// タスクの完了状態
	Done bool `form:"done" json:"done" xml:"done"`
	// タスクのタイトル
	Title string `form:"title" json:"title" xml:"title"`
}

// Validate validates the TaskPayload type instance.
func (ut *TaskPayload) Validate() (err error) {
	if ut.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "title"))
	}
	if utf8.RuneCountInString(ut.Title) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.title`, ut.Title, utf8.RuneCountInString(ut.Title), 2, true))
	}
	if utf8.RuneCountInString(ut.Title) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.title`, ut.Title, utf8.RuneCountInString(ut.Title), 128, false))
	}
	return
}
