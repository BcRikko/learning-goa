// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "Task": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/BcRikko/learning-goa/design
// --out=$(GOPATH)/src/github.com/BcRikko/learning-goa
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CreateTasksContext provides the Tasks create action context.
type CreateTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *TaskPayload
}

// NewCreateTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the Tasks controller create action.
func NewCreateTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateTasksContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateTasksContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteTasksContext provides the Tasks delete action context.
type DeleteTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TaskID int
}

// NewDeleteTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the Tasks controller delete action.
func NewDeleteTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTaskID := req.Params["taskID"]
	if len(paramTaskID) > 0 {
		rawTaskID := paramTaskID[0]
		if taskID, err2 := strconv.Atoi(rawTaskID); err2 == nil {
			rctx.TaskID = taskID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("taskID", rawTaskID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteTasksContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteTasksContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteTasksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListTasksContext provides the Tasks list action context.
type ListTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the Tasks controller list action.
func NewListTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTasksContext) OK(r XLearningGoaCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/x-learning-goa+json; type=collection")
	if r == nil {
		r = XLearningGoaCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowTasksContext provides the Tasks show action context.
type ShowTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TaskID int
}

// NewShowTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the Tasks controller show action.
func NewShowTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTaskID := req.Params["taskID"]
	if len(paramTaskID) > 0 {
		rawTaskID := paramTaskID[0]
		if taskID, err2 := strconv.Atoi(rawTaskID); err2 == nil {
			rctx.TaskID = taskID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("taskID", rawTaskID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTasksContext) OK(r *XLearningGoa) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/x-learning-goa+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowTasksContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTasksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateTasksContext provides the Tasks update action context.
type UpdateTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TaskID  int
	Payload *TaskPayload
}

// NewUpdateTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the Tasks controller update action.
func NewUpdateTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTaskID := req.Params["taskID"]
	if len(paramTaskID) > 0 {
		rawTaskID := paramTaskID[0]
		if taskID, err2 := strconv.Atoi(rawTaskID); err2 == nil {
			rctx.TaskID = taskID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("taskID", rawTaskID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateTasksContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTasksContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateTasksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
